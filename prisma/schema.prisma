// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserRole {
  RESIDENT
  BARANGAY
  ADMIN
}

enum DonationStatus {
  SCHEDULED
  DISTRIBUTED
  CLAIMED
  CANCELLED
}

enum ClaimStatus {
  PENDING
  VERIFIED
  CLAIMED
  REJECTED
}

enum FamilyMemberRelation {
  SPOUSE
  CHILD
  PARENT
  SIBLING
  OTHER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(RESIDENT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Resident specific fields
  barangayId String?
  barangay   Barangay? @relation(fields: [barangayId], references: [id])
  idFilePath String?   // Path to uploaded ID file
  families   Family[]
  claims     Claim[] @relation("ClaimedByUser")
  verifiedClaims Claim[] @relation("VerifiedByUser")

  // Barangay specific fields
  managedBarangay Barangay? @relation("BarangayManager")

  // Audit logs
  auditLogs AuditLog[]

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Barangay {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  managerId String? @unique
  manager   User?   @relation("BarangayManager", fields: [managerId], references: [id])
  residents User[]
  families  Family[]
  schedules DonationSchedule[]
  claims    Claim[]

  @@map("barangays")
}

model Family {
  id         String   @id @default(cuid())
  headId     String
  head       User     @relation(fields: [headId], references: [id])
  barangayId String
  barangay   Barangay @relation(fields: [barangayId], references: [id])
  address    String
  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members FamilyMember[]
  claims  Claim[]

  @@map("families")
}

model FamilyMember {
  id       String                @id @default(cuid())
  familyId String
  family   Family                @relation(fields: [familyId], references: [id])
  name     String
  relation FamilyMemberRelation
  age      Int?
  createdAt DateTime @default(now())

  @@map("family_members")
}

model DonationSchedule {
  id          String         @id @default(cuid())
  barangayId  String
  barangay    Barangay       @relation(fields: [barangayId], references: [id])
  title       String
  description String?
  date        DateTime
  startTime   String
  endTime     String
  location    String
  maxRecipients Int?
  status      DonationStatus @default(SCHEDULED)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  claims Claim[]

  @@map("donation_schedules")
}

model Claim {
  id         String         @id @default(cuid())
  familyId   String
  family     Family         @relation(fields: [familyId], references: [id])
  scheduleId String
  schedule   DonationSchedule @relation(fields: [scheduleId], references: [id])
  claimedBy  String
  claimedByUser User        @relation("ClaimedByUser", fields: [claimedBy], references: [id])
  barangayId String
  barangay   Barangay       @relation(fields: [barangayId], references: [id])
  status     ClaimStatus    @default(PENDING)
  isVerified Boolean        @default(false)
  claimedAt  DateTime       @default(now())
  verifiedAt DateTime?
  claimedAtPhysical DateTime?
  notes      String?
  verifiedBy String?
  verifiedByUser User?      @relation("VerifiedByUser", fields: [verifiedBy], references: [id])

  @@unique([familyId, scheduleId])
  @@map("claims")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  details   String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model ContactInfo {
  id        String   @id @default(cuid())
  type      String   // email, phone, address
  value     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_info")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model SMSSettings {
  id       String   @id @default(cuid())
  username String
  password String
  isActive Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sms_settings")
}